use strict;
use File::Basename;
use FindBin '$Bin';

=head1 sample

	perl MHC_snp2ld_assemble.pl snp-file version(hg19) > ld-file

=head1 done

=cut
die `pod2text $0` if(@ARGV < 1);
######################################################################################################

my$version=$ARGV[1]||"hg19";
my($sample,$gene,$exon)=(split /[\._]/,basename$ARGV[0])[0,-3,-2];
$gene=$gene."_".$exon;
my$bin=dirname$Bin;
my$mhc_data="$bin/database/MHC.$version.database";
my$mhc_type="$bin/database/database_$version/$gene.type";
my($pos_start,$pos_end,%data);

open IN,"< $mhc_data" or die "$!->$mhc_data\n";
while(<IN>){
	chomp;
	my($exon,$pos1,$pos2)=(split)[0,2,3];
	if($exon eq $gene){$pos_start=$pos1;$pos_end=$pos2;}
}

open IN,"< $mhc_type" or die "$!->$mhc_type\n";
while(<IN>){
	chomp;my@ln=split;
	my@indel;foreach my$i(3..$#ln){push @indel,$ln[$i];}
	my@snp = split /-/,$ln[2];
	@{$data{$ln[0]}{"snp"}}=@snp;@{$data{$ln[0]}{"indel"}}=@indel;
}

my(%hash,%been_done,%hash_done);
open IN,"< $ARGV[0]" or die "$!->$ARGV[0]\n";
while(<IN>){
	chomp;next if(/^\s*$/);
	my($snp,@index)=split;@{$hash{$snp}}=@index;
}
######################################################################################################

while(1){
	my$start_reads;my%start_hap;
	foreach my$snp(sort keys %hash){
		unless(exists $been_done{$snp}){
			$start_reads=$snp;$been_done{$snp}++;last;
		}
	}
	unless($start_reads){last;}
	$start_hap{$start_reads}++;

	while(1){
		unless(%start_hap){last;}
		foreach my$hap(sort keys %start_hap){
			my@reads_hap;
			foreach my$kes(sort keys %hash){
				my($pos1_hap,$pos2_hap)=split /\*/,$hap;
				my($pos1_kes,$pos2_kes)=split /\*/,$kes;
				if($pos1_kes>=$pos1_hap && $pos2_kes<=$pos2_hap){$been_done{$kes};next;}##maybe sevels haplotypes will be generated by short reads.

				my@return=check_reads($hap,$kes);
				if($return[0]==1 && $return[1]>=10){push @reads_hap,$kes;$been_done{$kes}++;}
			}
			if(@reads_hap==0){$hash_done{$hap}++;}
			my@check_hap=hap_constuct(\@reads_hap);

			foreach my$check_hap(@check_hap){
				my@hap_joint=check_reads($hap,$check_hap);
				my$new_hap_joint=join("*",$hap_joint[2],$hap_joint[3],$hap_joint[4],$hap_joint[5]);
				$start_hap{$new_hap_joint}++;
			}
			delete($start_hap{$hap});
		}
	}
}

#####################################################################################################

my%hap_do;
foreach my$hap(keys %hash_done){
	my($pos1_hap,$pos2_hap,$snp_hap,$indel_hap)=split /\*/,$hap;
	my$check_data=0;my@type_hap;my@reads_hap;my@depth_hap;my%depth;

	foreach my$type(sort keys %data){
		my@snp_data;my@indel_data;
		foreach my$snp(@{$data{$type}{"snp"}}){
			my$pos=(split /:/,$snp)[0];
			if($pos>=$pos1_hap && $pos<=$pos2_hap){push @snp_data,$snp;}
		}
		foreach my$indel(@{$data{$type}{"indel"}}){
			my$pos=(split /-/,$indel)[0];
			if($pos>=$pos1_hap && $pos<=$pos2_hap){push @indel_data,$indel;}
		}
		my$snp_data=join("-",@snp_data)||"None";
		my$indel_data=join(":",@indel_data)||"None";
		if($snp_data eq $snp_hap && $indel_data eq $indel_hap){$check_data++;push @type_hap,$type;}
	}
	if($check_data==0){next;}

	foreach my$reads(keys %hash){
		my@check=check_reads($hap,$reads);
		if($check[0]==1 && $check[2]==$pos1_hap && $check[3]==$pos2_hap){
			push @reads_hap,@{$hash{$reads}};
			my($pos1,$pos2)=split /\*/,$reads;
			foreach my$pos($pos1..$pos2){$depth{$pos}+=@{$hash{$reads}};}
		}
	}
	my%tem;@tem{@reads_hap}=();@reads_hap=keys %tem;

	my$mean_depth=0;my$len=0;
	foreach my$pos(sort {$a<=>$b} keys %depth){
		push @depth_hap,$depth{$pos};
		$len++;$mean_depth+=$depth{$pos};
	}
	$mean_depth=$mean_depth/$len;

	my$cov=($pos2_hap-$pos1_hap+1)/($pos_end-$pos_start+1);
	my$x2;foreach my$depth(@depth_hap){$x2+=($depth-$mean_depth)**2/$mean_depth;}
	my$p_value=$x2/log($len-1);if($p_value<=60){$p_value=60;}
	my$score=($cov**2)*@reads_hap/(log$p_value)**2;

	$hap_do{$hap}{"score"}=$score;
	@{$hap_do{$hap}{"reads"}}=@reads_hap;
	@{$hap_do{$hap}{"type"}}=@type_hap;
	@{$hap_do{$hap}{"depth"}}=@depth_hap;
}
#######################################################################################################

my%hap_filt;my$best_haps_score=0;
while(1){
	unless(%hap_do){last;}
	my@haps=keys %hap_do;my($test_hap,$score)=max(\@haps);
	my@type=@{$hap_do{$test_hap}{"type"}};
	my@reads=@{$hap_do{$test_hap}{"reads"}};
	my@depth=@{$hap_do{$test_hap}{"depth"}};
	if(exists $hap_do{$test_hap}){delete($hap_do{$test_hap});}

	my$count_haps=keys %hap_filt;my$count_test=0;my$best_score=0;
	foreach my$hap(keys %hap_filt){
		my@hap=split /\*/,$hap;	my@test=split /\*/,$test_hap;
		if($best_score<$hap_filt{$hap}{"score"}){$best_score=$hap_filt{$hap}{"score"};}

		my%pos;my@diffe;my%pos_in;
		foreach my$pos($hap[0]..$hap[1]){$pos{$pos}++;}
		foreach my$pos($test[0]..$test[1]){$pos{$pos}++;}
		my@hap_snp=split /-/,$hap[2];my@hap_indel=split /:/,$hap[3];
		my@test_snp=split /-/,$test[2];my@test_indel=split /:/,$test[3];
		foreach my$snp(@hap_snp){
			my$pos=(split /:/,$snp)[0];
			if($pos{$pos}==2){$pos_in{$snp}++;}
		}
		foreach my$snp(@test_snp){
			my$pos=(split /:/,$snp)[0];
			if($pos{$pos}==2){$pos_in{$snp}++;}
		}
		foreach my$indel(@hap_indel){
			my$pos=(split /-/,$indel)[0];
			if($pos{$pos}==2){$pos_in{$indel}++;}
		}
		foreach my$indel(@test_indel){
			my$pos=(split /-/,$indel)[0];
			if($pos{$pos}==2){$pos_in{$indel}++;}
		}
		foreach my$kes(sort keys %pos_in){if($pos_in{$kes}==1){push @diffe,$kes;}}
		if(@diffe>3){next;}
		
		foreach my$var(@diffe){
			my$pos=(split /[:-]/,$var)[0];
			my$pos_hap=$pos-$hap[0];my$pos_test=$pos-$test[0];
			if($depth[$pos_test]/${$hap_filt{$hap}{"depth"}}[$pos_hap]<=0.2){$count_test++;last;}
		}
	}

	my$score_rate=1;
	if($best_score!=0){
		$count_haps=$count_haps>2?$count_haps:3;
		$score_rate=$score/$best_score/log($count_haps);
	}
	if($count_test==0 && $score_rate>=0.2){
		$hap_filt{$test_hap}{"score"}=$score;
		@{$hap_filt{$test_hap}{"type"}}=@type;
		@{$hap_filt{$test_hap}{"reads"}}=@reads;
		@{$hap_filt{$test_hap}{"depth"}}=@depth;
		if($score>$best_haps_score){$best_haps_score=$score;}
	}
}
unless(%hap_filt){die "No haps exists in $sample-$gene\n";}

foreach my$kes(sort keys %hap_filt){
	my$mean_dep;my$len_dep=0;
	foreach my$dep(@{$hap_filt{$kes}{"depth"}}){$mean_dep+=$dep;$len_dep++;}
	$mean_dep=$mean_dep/$len_dep;

	my$trans=log($mean_dep)/log(10)>1?1:log($mean_dep)/log(10);
	my$score_total=$hap_filt{$kes}{"score"}/$best_haps_score*$trans;
	my@type=@{$hap_filt{$kes}{"type"}};my@reads=@{$hap_filt{$kes}{"reads"}};
	print "$kes\t$score_total\t".sprintf("%.2f",$mean_dep)."\t@type\n@reads\n";
}

#####################################################################################################

sub max{
	my$high;my$high_hap;
	foreach my$hap(@{$_[0]}){
		if($high<$hap_do{$hap}{"score"}){$high=$hap_do{$hap}{"score"};$high_hap=$hap;}
	}
	return($high_hap,$high);
}

sub check_reads{
	my@reads1=split /\*/,$_[0];my@reads2=split /\*/,$_[1];
	
	my%pos_sub;my@pos_sub;my@pos_sub_all;
	foreach my$pos($reads1[0]..$reads1[1]){$pos_sub{$pos}++;}
	foreach my$pos($reads2[0]..$reads2[1]){$pos_sub{$pos}++;}
	foreach my$pos(keys %pos_sub){
		if($pos_sub{$pos}==2){push @pos_sub,$pos;}
		push @pos_sub_all,$pos;
	}
	@pos_sub_all=sort {$a<=>$b} @pos_sub_all;

	my@snp_reads1=split /-/,$reads1[2];my@indel_reads1=split /:/,$reads1[3];
	my@snp_reads2=split /-/,$reads2[2];my@indel_reads2=split /:/,$reads2[3];
	my@reads1_snp;my@reads2_snp;my@reads1_indel;my@reads2_indel;

	foreach my$snp(@snp_reads1){
		my$pos=(split /:/,$snp)[0];
		if($pos_sub{$pos}==2){push @reads1_snp,$snp;}
	}
	foreach my$indel(@indel_reads1){
		my$pos=(split /-/,$indel)[0];
		if($pos_sub{$pos}==2){push @reads1_indel,$indel;}
	}
	foreach my$snp(@snp_reads2){
		my$pos=(split /:/,$snp)[0];
		if($pos_sub{$pos}==2){push @reads2_snp,$snp;}
	}
	foreach my$indel(@indel_reads2){
		my$pos=(split /-/,$indel)[0];
		if($pos_sub{$pos}==2){push @reads2_indel,$indel;}
	}

	my$reads1_snp=join("-",@reads1_snp)||"None";
	my$reads1_indel=join(":",@reads1_indel)||"None";
	my$reads2_snp=join("-",@reads2_snp)||"None";
	my$reads2_indel=join(":",@reads2_indel)||"None";

	my$return_check=0;my$return_len=scalar@pos_sub;
	if($reads1_snp eq $reads2_snp && $reads1_indel eq $reads2_indel){$return_check=1;}
	if($return_len==0){$return_check=0;}
	push my@snp_total,@snp_reads1,@snp_reads2;my@new_snp;
	push my@indel_total,@indel_reads1,@indel_reads2;my@new_indel;
	foreach my$variants(@snp_total,@indel_total){
		if($variants eq "None"){next;}
		if($variants=~/:/){push @new_snp,$variants;}
		if($variants=~/-/){push @new_indel,$variants;}
	}
	my%tem;@tem{@new_snp}=();@new_snp=sort keys %tem;
	my%tem;@tem{@new_indel}=();@new_indel=sort keys %tem;
	my$new_snp=join("-",@new_snp)||"None";my$new_indel=join(":",@new_indel)||"None";

	return($return_check,$return_len,$pos_sub_all[0],$pos_sub_all[-1],$new_snp,$new_indel);
}

sub hap_constuct{
	my@reads=@{$_[0]};my%done_sub;my@hap_sub;	
	while(1){
		my$start;
		foreach my$reads(@reads){
			unless(exists $done_sub{$reads}){
				$start=$reads;$done_sub{$reads}++;last;
			}
		}
		unless($start){last;}

		foreach my$reads(@reads){
			my@return=check_reads($start,$reads);
			if($return[0]==1){
				$start=join("*",$return[2],$return[3],$return[4],$return[5]);
				$done_sub{$reads}++;
			}
		}
		push @hap_sub,$start;
	}
	return(@hap_sub);
}

